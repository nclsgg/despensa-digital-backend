basePath: /
definitions:
  dto.CompleteProfileRequest:
    properties:
      first_name:
        type: string
      last_name:
        type: string
    required:
    - first_name
    - last_name
    type: object
  dto.CreateDefaultItemCategoryDTO:
    properties:
      color:
        type: string
      name:
        type: string
    required:
    - color
    - name
    type: object
  dto.CreateItemCategoryDTO:
    properties:
      color:
        type: string
      name:
        type: string
      pantry_id:
        type: string
    required:
    - color
    - name
    - pantry_id
    type: object
  dto.CreateItemDTO:
    properties:
      category_id:
        type: string
      expires_at:
        type: string
      name:
        type: string
      pantry_id:
        type: string
      price_per_unit:
        minimum: 0
        type: number
      quantity:
        minimum: 0
        type: number
      unit:
        type: string
    required:
    - name
    - pantry_id
    - price_per_unit
    - quantity
    - unit
    type: object
  dto.CreatePantryRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  dto.ItemCategoryResponse:
    properties:
      added_by:
        type: string
      color:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: string
      name:
        type: string
      pantry_id:
        type: string
      updated_at:
        type: string
    type: object
  dto.ItemFilterDTO:
    properties:
      category_id:
        type: string
      expires_until:
        type: string
      max_price:
        type: number
      min_price:
        type: number
      name:
        type: string
      sort_by:
        description: '"price", "expires_at", "category", "name"'
        type: string
      sort_direction:
        description: '"asc", "desc"'
        type: string
    type: object
  dto.ItemResponse:
    properties:
      added_by:
        type: string
      category_id:
        type: string
      created_at:
        type: string
      expires_at:
        type: string
      id:
        type: string
      name:
        type: string
      pantry_id:
        type: string
      price_per_unit:
        type: number
      quantity:
        type: number
      total_price:
        type: number
      unit:
        type: string
      updated_at:
        type: string
    type: object
  dto.ModifyPantryUserRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  dto.PantryResponse:
    properties:
      id:
        type: string
      item_count:
        type: integer
      name:
        type: string
      owner_id:
        type: string
    type: object
  dto.PantryUserResponse:
    properties:
      email:
        type: string
      role:
        type: string
      user_id:
        type: string
    type: object
  dto.UpdateItemCategoryDTO:
    properties:
      color:
        type: string
      name:
        type: string
    type: object
  dto.UpdateItemDTO:
    properties:
      category_id:
        type: string
      expires_at:
        type: string
      name:
        type: string
      price_per_unit:
        type: number
      quantity:
        type: number
      unit:
        type: string
    type: object
  dto.UpdatePantryRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  dto.UpdateProfileRequest:
    properties:
      first_name:
        type: string
      last_name:
        type: string
    required:
    - first_name
    - last_name
    type: object
  response.APIError:
    properties:
      code:
        type: string
      message:
        type: string
    type: object
  response.APIResponse:
    properties:
      data: {}
      error:
        $ref: '#/definitions/response.APIError'
      success:
        type: boolean
    type: object
  response.LoginPayload:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  response.LoginSuccessResponse:
    properties:
      data:
        $ref: '#/definitions/response.LoginPayload'
      error:
        $ref: '#/definitions/response.APIError'
      success:
        type: boolean
    type: object
  response.MessagePayload:
    properties:
      message:
        type: string
    type: object
  response.MessageResponse:
    properties:
      data:
        $ref: '#/definitions/response.MessagePayload'
      error:
        $ref: '#/definitions/response.APIError'
      success:
        type: boolean
    type: object
  response.UserListResponseWrapper:
    properties:
      data:
        items: {}
        type: array
      error:
        $ref: '#/definitions/response.APIError'
      success:
        type: boolean
    type: object
  response.UserResponseWrapper:
    properties:
      data: {}
      error:
        $ref: '#/definitions/response.APIError'
      success:
        type: boolean
    type: object
host: localhost:5310
info:
  contact:
    email: nicolasguadagno@gmail.com
    name: Nicolas Guadagno
    url: http://github.com/nclsgg
  description: API da aplicação Despensa Digital
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Despensa Digital API
  version: "1.0"
paths:
  /auth/complete-profile:
    patch:
      consumes:
      - application/json
      parameters:
      - description: Profile data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Complete user profile
      tags:
      - Auth
  /auth/oauth/{provider}:
    get:
      parameters:
      - description: OAuth Provider (google)
        in: path
        name: provider
        required: true
        type: string
      responses:
        "302":
          description: Redirect to OAuth provider
      summary: Initiate OAuth login
      tags:
      - OAuth
  /auth/oauth/{provider}/callback:
    get:
      parameters:
      - description: OAuth Provider (google)
        in: path
        name: provider
        required: true
        type: string
      - description: OAuth code
        in: query
        name: code
        required: true
        type: string
      - description: OAuth state
        in: query
        name: state
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.LoginSuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: OAuth callback
      tags:
      - OAuth
  /item-categories:
    post:
      consumes:
      - application/json
      parameters:
      - description: Item Category data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.CreateItemCategoryDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.ItemCategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Create a new item category
      tags:
      - Item Categories
  /item-categories/{id}:
    delete:
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Delete an item category by ID
      tags:
      - Item Categories
    get:
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ItemCategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Get an item category by ID
      tags:
      - Item Categories
    put:
      consumes:
      - application/json
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated fields
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateItemCategoryDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ItemCategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Update an item category
      tags:
      - Item Categories
  /item-categories/default:
    post:
      consumes:
      - application/json
      parameters:
      - description: Default Item Category data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.CreateDefaultItemCategoryDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.ItemCategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Create a new default item category
      tags:
      - Item Categories
  /item-categories/from-default/{default_id}/pantry/{pantry_id}:
    post:
      consumes:
      - application/json
      parameters:
      - description: Pantry ID
        in: path
        name: pantry_id
        required: true
        type: string
      - description: Default Category ID
        in: path
        name: default_category_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.ItemCategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Clone a default item category to a pantry
      tags:
      - Item Categories
  /item-categories/user:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ItemCategoryResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: List item categories created by the user
      tags:
      - Item Categories
  /items:
    get:
      parameters:
      - description: Pantry ID
        in: query
        name: pantry_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/dto.ItemResponse'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: List all items by pantry ID
      tags:
      - Items
    post:
      consumes:
      - application/json
      parameters:
      - description: Item data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.CreateItemDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.ItemResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Create a new item
      tags:
      - Items
  /items/{id}:
    delete:
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Delete an item by ID
      tags:
      - Items
    get:
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ItemResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Get an item by ID
      tags:
      - Items
    put:
      consumes:
      - application/json
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated fields
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateItemDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ItemResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Update an item
      tags:
      - Items
  /items/pantry/{id}/filter:
    post:
      consumes:
      - application/json
      parameters:
      - description: Pantry ID
        in: path
        name: id
        required: true
        type: string
      - description: Filter criteria
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.ItemFilterDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              items:
                $ref: '#/definitions/dto.ItemResponse'
              type: array
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Filter items by pantry ID with filters
      tags:
      - Items
  /pantries:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.PantryResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: List all pantries from the current user
      tags:
      - Pantry
    post:
      consumes:
      - application/json
      parameters:
      - description: Pantry data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePantryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.PantryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Create a new pantry
      tags:
      - Pantry
  /pantries/{id}:
    delete:
      parameters:
      - description: Pantry ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Soft delete a pantry
      tags:
      - Pantry
    get:
      parameters:
      - description: Pantry ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PantryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Get a specific pantry
      tags:
      - Pantry
    put:
      consumes:
      - application/json
      parameters:
      - description: Pantry ID
        in: path
        name: id
        required: true
        type: string
      - description: New name
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePantryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Update pantry name
      tags:
      - Pantry
  /pantries/{id}/item-categories:
    get:
      parameters:
      - description: Pantry ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ItemCategoryResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: List item categories by pantry
      tags:
      - Item Categories
  /pantries/{id}/users:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Pantry ID
        in: path
        name: id
        required: true
        type: string
      - description: User to remove
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.ModifyPantryUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Remove a user from the pantry
      tags:
      - Pantry
    get:
      parameters:
      - description: Pantry ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.PantryUserResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: List users in a pantry
      tags:
      - Pantry
    post:
      consumes:
      - application/json
      parameters:
      - description: Pantry ID
        in: path
        name: id
        required: true
        type: string
      - description: User to add
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.ModifyPantryUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Add a user to the pantry
      tags:
      - Pantry
  /user/{id}:
    get:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Get user by ID
      tags:
      - User
  /user/all:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/response.UserListResponseWrapper'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: List all users (admin only)
      tags:
      - User
  /user/complete-profile:
    put:
      consumes:
      - application/json
      description: Updates user's first name and last name
      parameters:
      - description: Profile completion data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CompleteProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - BearerAuth: []
      summary: Complete user profile after OAuth registration
      tags:
      - User
  /user/me:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserResponseWrapper'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Get current authenticated user
      tags:
      - User
swagger: "2.0"
